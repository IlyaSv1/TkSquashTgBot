from telegram import Update, Message
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from config import ADMINS_CHAT_ID
from database.db import save_mapping
from utils.helpers import short_id
from utils.logger import Logger
from utils.user_formatter import format_user_for_log, format_user_for_admin

logger = Logger().get_logger()
ID_PREFIX = "Q#"


async def on_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg: Message = update.effective_message

    logger.info(f"Received message from {msg.chat.id} of type {msg.chat.type}")

    if msg.chat.type != msg.chat.PRIVATE:
        logger.info("Message ignored: not private chat")
        return

    text = msg.text or msg.caption or ""
    has_media = bool(msg.photo or msg.document or msg.video or msg.audio)

    if not text and not has_media:
        await msg.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∞–π–ª.")
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    qid = short_id()
    question_text = text or ""
    file_id = None
    media_type = None

    if msg.photo:
        file_id = msg.photo[-1].file_id
        media_type = "photo"
    elif msg.document:
        file_id = msg.document.file_id
        media_type = "document"
    elif msg.video:
        file_id = msg.video.file_id
        media_type = "video"
    elif msg.audio:
        file_id = msg.audio.file_id
        media_type = "audio"

    await save_mapping(qid, msg.chat.id, question_text, question_file_id=file_id)

    user_label_admin = format_user_for_admin(update.effective_user)
    user_label_log = format_user_for_log(update.effective_user)

    header = f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b> –æ—Ç {user_label_admin}\n\n"
    header += f"{text if text else 'üìé –í–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª'}\n\n(ID:{qid})"
    logger.info(
        f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {ID_PREFIX}{qid} –æ—Ç {user_label_log}: {question_text}")

    try:
        if media_type == "photo":
            sent = await context.bot.send_photo(
                chat_id=ADMINS_CHAT_ID,
                photo=file_id,
                caption=header,
                parse_mode=ParseMode.HTML
            )
        elif media_type == "document":
            sent = await context.bot.send_document(
                chat_id=ADMINS_CHAT_ID,
                document=file_id,
                caption=header,
                parse_mode=ParseMode.HTML
            )
        elif media_type == "video":
            sent = await context.bot.send_video(
                chat_id=ADMINS_CHAT_ID,
                video=file_id,
                caption=header,
                parse_mode=ParseMode.HTML
            )
        elif media_type == "audio":
            sent = await context.bot.send_audio(
                chat_id=ADMINS_CHAT_ID,
                audio=file_id,
                caption=header,
                parse_mode=ParseMode.HTML
            )
        else:
            sent = await context.bot.send_message(
                chat_id=ADMINS_CHAT_ID,
                text=header,
                parse_mode=ParseMode.HTML
            )

        await context.bot.send_message(
            chat_id=ADMINS_CHAT_ID,
            text="üëâ <b>–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>.",
            reply_to_message_id=sent.message_id,
            parse_mode=ParseMode.HTML,
        )

        try:
            await context.bot.pin_chat_message(
                chat_id=ADMINS_CHAT_ID,
                message_id=sent.message_id,
                disable_notification=True,
            )
            logger.info(f"–í–æ–ø—Ä–æ—Å {ID_PREFIX}{qid} –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å {ID_PREFIX}{qid}: {e}")

        logger.info(f"–í–æ–ø—Ä–æ—Å {ID_PREFIX}{qid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤.")

    except Exception as e:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ {ID_PREFIX}{qid} –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤: {e}")
        return

    await msg.reply_text("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.")


def register_handlers(dispatcher):
    dispatcher.add_handler(
        MessageHandler(filters.ALL & filters.ChatType.PRIVATE, on_user_message)
    )
