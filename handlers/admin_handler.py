import re
from telegram import Update, Chat
from telegram.ext import ContextTypes
from config import ADMINS_CHAT_ID
from database.db import get_user_by_qid, mark_answered
from utils.logger import Logger

logger = Logger().get_logger()


async def on_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat: Chat = update.effective_chat

    if chat.id != ADMINS_CHAT_ID:
        return

    if not msg.reply_to_message or not msg.text:
        return

    original_text = msg.reply_to_message.text or ""
    match = re.search(r"\(ID:(\w+)\)", original_text)
    if not match:
        return

    qid = match.group(1)
    row = await get_user_by_qid(qid)
    if not row:
        await msg.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω).")
        return

    user_chat_id = row[0]
    question_text = row[1]
    admin_user = update.effective_user

    try:
        user_answer = (
            "üí¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n"
            f"{question_text}\n\n"
            f"üí° –û—Ç–≤–µ—Ç:\n{msg.text}"
        )

        await context.bot.send_message(
            chat_id=user_chat_id,
            text=user_answer
        )

        await mark_answered(qid)

        try:
            await context.bot.unpin_chat_message(
                chat_id=ADMINS_CHAT_ID,
                message_id=msg.reply_to_message.message_id
            )
            logger.info(f"–í–æ–ø—Ä–æ—Å ID:{qid} –æ—Ç–∫—Ä–µ–ø–ª—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å ID:{qid}: {e}")

        await msg.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–ø—Ä–æ—Å ID:{qid}).")

        logger.info(
            f"–ê–¥–º–∏–Ω {admin_user.username} "
            f"–æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å ID:{qid}: \"{msg.text}\""
        )

    except Exception as e:
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ID:{qid}: {e}")
